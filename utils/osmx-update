#!/usr/bin/env python

from datetime import datetime, timezone
import subprocess
import tempfile
import os
import sys
import fcntl

from server import ReplicationServer

osmx = os.path.dirname(os.path.dirname(os.path.abspath(__file__))) + '/osmx'

try:
  file = open('/tmp/osmx.lock','w')
  fcntl.lockf(file, fcntl.LOCK_EX | fcntl.LOCK_NB)

  s = ReplicationServer(sys.argv[2])

  # OSMX always uses minutely timestamps internally - try integrating daily
  seqnum = int(subprocess.check_output([osmx,'seqnum',sys.argv[1]]))

  if not seqnum:
    timestamp = subprocess.check_output([osmx,'timestamp',sys.argv[1]])
    timestamp = timestamp.decode('utf-8').strip()
    timestamp = datetime.strptime(timestamp, "%Y-%m-%dT%H:%M:%SZ")
    timestamp = timestamp.replace(tzinfo=timezone.utc)
    print('Timestamp is {0}'.format(timestamp))
    seqnum = s.timestamp_to_sequence(timestamp)

  print('Sequence number is {0}'.format(seqnum))

  latest = s.get_state_info().sequence
  print("Latest is {0}".format(latest))

  def apply_changes(start_id):
   current_id = start_id
   while current_id < latest:
     fd, path = tempfile.mkstemp(suffix='.osc.gz')
     with open(fd,'wb') as f:
       f.write(s.get_diff_block(current_id))
     info = s.get_state_info(current_id)
     timestamp = info.timestamp.strftime('%Y-%m-%dT%H:%M:%SZ')
     subprocess.check_call([osmx,'update',sys.argv[1],path,str(current_id),timestamp,'--commit'])
     os.unlink(path)
     current_id = current_id + 1

  apply_changes(seqnum+1)

except BlockingIOError:
  print("Process is running - exiting.")
finally:
  fcntl.lockf(file, fcntl.LOCK_UN)
  file.close()

